/*
Deployment script for MainDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar BuildConfiguration "Release"
:setvar DatabaseName "MainDB"
:setvar DefaultFilePrefix "MainDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[ChannelType]...';


GO
CREATE TABLE [dbo].[ChannelType] (
    [ChannelTypeId] INT           NOT NULL,
    [Name]          VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ChannelTypeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Channel]...';


GO
CREATE TABLE [dbo].[Channel] (
    [ChannelId] INT          IDENTITY (1, 1) NOT NULL,
    [ServerId]  INT          NOT NULL,
    [DiscordId] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([ChannelId] ASC)
);


GO
PRINT N'Creating Table [dbo].[TwitchChannel]...';


GO
CREATE TABLE [dbo].[TwitchChannel] (
    [TwitchChannelId] INT           IDENTITY (1, 1) NOT NULL,
    [TwitchId]        VARCHAR (12)  NOT NULL,
    [TwitchLink]      VARCHAR (100) NOT NULL,
    [ServerId]        INT           NOT NULL,
    [RoleId]          INT           NULL,
    PRIMARY KEY CLUSTERED ([TwitchChannelId] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserBias]...';


GO
CREATE TABLE [dbo].[UserBias] (
    [UserBiasId] INT IDENTITY (1, 1) NOT NULL,
    [UserId]     INT NOT NULL,
    [IdolId]     INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserBiasId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Idol]...';


GO
CREATE TABLE [dbo].[Idol] (
    [IdolId]  INT           IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (100) NOT NULL,
    [GroupId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([IdolId] ASC)
);


GO
PRINT N'Creating Table [dbo].[IdolGroup]...';


GO
CREATE TABLE [dbo].[IdolGroup] (
    [GroupId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([GroupId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [RoleId]    INT          IDENTITY (1, 1) NOT NULL,
    [ServerId]  INT          NOT NULL,
    [DiscordId] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([RoleId] ASC),
    UNIQUE NONCLUSTERED ([DiscordId] ASC)
);


GO
PRINT N'Creating Table [dbo].[CustomCommand]...';


GO
CREATE TABLE [dbo].[CustomCommand] (
    [CommandId] INT           IDENTITY (1, 1) NOT NULL,
    [ServerId]  INT           NOT NULL,
    [Command]   VARCHAR (50)  NOT NULL,
    [Url]       VARCHAR (500) NOT NULL,
    PRIMARY KEY CLUSTERED ([CommandId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Keyword]...';


GO
CREATE TABLE [dbo].[Keyword] (
    [KeywordId] INT           IDENTITY (1, 1) NOT NULL,
    [ServerId]  INT           NOT NULL,
    [Trigger]   VARCHAR (100) NOT NULL,
    [Response]  VARCHAR (300) NOT NULL,
    PRIMARY KEY CLUSTERED ([KeywordId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Greeting]...';


GO
CREATE TABLE [dbo].[Greeting] (
    [GreetingId] INT           IDENTITY (1, 1) NOT NULL,
    [Url]        VARCHAR (500) NOT NULL,
    PRIMARY KEY CLUSTERED ([GreetingId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Server]...';


GO
CREATE TABLE [dbo].[Server] (
    [ServerId]  INT          IDENTITY (1, 1) NOT NULL,
    [DiscordId] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([ServerId] ASC),
    UNIQUE NONCLUSTERED ([DiscordId] ASC)
);


GO
PRINT N'Creating Table [dbo].[ServerSettingChannel]...';


GO
CREATE TABLE [dbo].[ServerSettingChannel] (
    [ServerSettingChannelId] INT IDENTITY (1, 1) NOT NULL,
    [ChannelId]              INT NOT NULL,
    [ChannelTypeId]          INT NOT NULL,
    PRIMARY KEY CLUSTERED ([ServerSettingChannelId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Reminder]...';


GO
CREATE TABLE [dbo].[Reminder] (
    [ReminderId] INT           IDENTITY (1, 1) NOT NULL,
    [UserId]     INT           NOT NULL,
    [Date]       DATETIME2 (7) NOT NULL,
    [Message]    VARCHAR (500) NOT NULL,
    PRIMARY KEY CLUSTERED ([ReminderId] ASC)
);


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]         INT           IDENTITY (1, 1) NOT NULL,
    [DiscordId]      VARCHAR (20)  NOT NULL,
    [LastFMUsername] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC),
    UNIQUE NONCLUSTERED ([DiscordId] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Channel_Server]...';


GO
ALTER TABLE [dbo].[Channel]
    ADD CONSTRAINT [FK_Channel_Server] FOREIGN KEY ([ServerId]) REFERENCES [dbo].[Server] ([ServerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TwitchChannel_Server]...';


GO
ALTER TABLE [dbo].[TwitchChannel]
    ADD CONSTRAINT [FK_TwitchChannel_Server] FOREIGN KEY ([ServerId]) REFERENCES [dbo].[Server] ([ServerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TwitchChannel_Role]...';


GO
ALTER TABLE [dbo].[TwitchChannel]
    ADD CONSTRAINT [FK_TwitchChannel_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([RoleId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserBias_User]...';


GO
ALTER TABLE [dbo].[UserBias]
    ADD CONSTRAINT [FK_UserBias_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserBias_Idol]...';


GO
ALTER TABLE [dbo].[UserBias]
    ADD CONSTRAINT [FK_UserBias_Idol] FOREIGN KEY ([IdolId]) REFERENCES [dbo].[Idol] ([IdolId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Idol_IdolGroup]...';


GO
ALTER TABLE [dbo].[Idol]
    ADD CONSTRAINT [FK_Idol_IdolGroup] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[IdolGroup] ([GroupId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Role_Server]...';


GO
ALTER TABLE [dbo].[Role]
    ADD CONSTRAINT [FK_Role_Server] FOREIGN KEY ([ServerId]) REFERENCES [dbo].[Server] ([ServerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CustomCommand_Server]...';


GO
ALTER TABLE [dbo].[CustomCommand]
    ADD CONSTRAINT [FK_CustomCommand_Server] FOREIGN KEY ([ServerId]) REFERENCES [dbo].[Server] ([ServerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Keyword_Server]...';


GO
ALTER TABLE [dbo].[Keyword]
    ADD CONSTRAINT [FK_Keyword_Server] FOREIGN KEY ([ServerId]) REFERENCES [dbo].[Server] ([ServerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ServerSettingChannel_Channel]...';


GO
ALTER TABLE [dbo].[ServerSettingChannel]
    ADD CONSTRAINT [FK_ServerSettingChannel_Channel] FOREIGN KEY ([ChannelId]) REFERENCES [dbo].[Channel] ([ChannelId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ServerSettingChannel_ChannelType]...';


GO
ALTER TABLE [dbo].[ServerSettingChannel]
    ADD CONSTRAINT [FK_ServerSettingChannel_ChannelType] FOREIGN KEY ([ChannelTypeId]) REFERENCES [dbo].[ChannelType] ([ChannelTypeId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Reminder_User]...';


GO
ALTER TABLE [dbo].[Reminder]
    ADD CONSTRAINT [FK_Reminder_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'be2890cb-6190-4f7f-ac56-0304cc045adf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('be2890cb-6190-4f7f-ac56-0304cc045adf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '381c8c17-9329-4823-8a17-b005a7c185d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('381c8c17-9329-4823-8a17-b005a7c185d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7f7c4390-1964-4473-8cf2-b2d26f98a095')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7f7c4390-1964-4473-8cf2-b2d26f98a095')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3248db27-7d5c-4745-a4a0-a80628958f41')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3248db27-7d5c-4745-a4a0-a80628958f41')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3dfad5b9-76c3-46a3-b385-df439fe888e0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3dfad5b9-76c3-46a3-b385-df439fe888e0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e45f478-85f9-42b6-9e7e-8aefd4a8c368')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e45f478-85f9-42b6-9e7e-8aefd4a8c368')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0ab3295c-eed2-4924-9a6d-cc708ac72d55')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0ab3295c-eed2-4924-9a6d-cc708ac72d55')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6028757b-542e-4a16-aebc-05b070f60181')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6028757b-542e-4a16-aebc-05b070f60181')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8a52494d-0f7d-4631-ac75-62d38f21714f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8a52494d-0f7d-4631-ac75-62d38f21714f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8ebaac9a-864f-49a8-9761-e7032658e0ba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8ebaac9a-864f-49a8-9761-e7032658e0ba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'da13789a-e791-4e41-89ce-0bca91eb763d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('da13789a-e791-4e41-89ce-0bca91eb763d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8214d95e-a1e4-4a77-ae57-e92a529d96db')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8214d95e-a1e4-4a77-ae57-e92a529d96db')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '164c8a1b-0566-408a-8a48-5b99a339a1e3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('164c8a1b-0566-408a-8a48-5b99a339a1e3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '28463de6-c545-4f28-a854-e9a9bdcfcd45')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('28463de6-c545-4f28-a854-e9a9bdcfcd45')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '52ea70be-32ad-4735-aed3-ef49da7f7fbc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('52ea70be-32ad-4735-aed3-ef49da7f7fbc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '342e0a1e-af95-4fbf-8df5-33c0957b093c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('342e0a1e-af95-4fbf-8df5-33c0957b093c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0a56fc3b-bff8-456e-a65c-39c41f07d2d8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0a56fc3b-bff8-456e-a65c-39c41f07d2d8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ac4cf8d4-b85e-4601-b14b-28bf1d3d4394')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ac4cf8d4-b85e-4601-b14b-28bf1d3d4394')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f72fcd99-dde2-474c-a2c9-e71465252ee5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f72fcd99-dde2-474c-a2c9-e71465252ee5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7e57089d-f84d-4cf5-a31b-75309d742549')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7e57089d-f84d-4cf5-a31b-75309d742549')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '58a49c87-0682-4a52-867b-b5967136f8a5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('58a49c87-0682-4a52-867b-b5967136f8a5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6539bb5-5a11-4488-884f-63996d414407')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6539bb5-5a11-4488-884f-63996d414407')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '10991a8a-8c1b-497d-a18a-232aa5cc6bd2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('10991a8a-8c1b-497d-a18a-232aa5cc6bd2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7ce2d58e-dd6e-4250-9c95-13e7b39a818c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7ce2d58e-dd6e-4250-9c95-13e7b39a818c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9d672293-ad2f-4389-89aa-61c418cf577c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9d672293-ad2f-4389-89aa-61c418cf577c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a0c9851a-3f5a-42d1-8a33-4435219fb822')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a0c9851a-3f5a-42d1-8a33-4435219fb822')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a928a61b-4ca7-435a-8099-63bf7f11ace1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a928a61b-4ca7-435a-8099-63bf7f11ace1')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

USE [$(DatabaseName)];

IF NOT EXISTS ( SELECT * FROM [dbo].[ChannelType] WHERE [ChannelTypeId] = 1 )
	INSERT INTO [dbo].[ChannelType] VALUES (1, 'RoleText');
	
IF NOT EXISTS ( SELECT * FROM [dbo].[ChannelType] WHERE [ChannelTypeId] = 2 )
	INSERT INTO [dbo].[ChannelType] VALUES  (2, 'TwitchNotificationText');

IF NOT EXISTS ( SELECT * FROM [dbo].[ChannelType] WHERE [ChannelTypeId] = 3 )
	INSERT INTO [dbo].[ChannelType] VALUES  (3, 'MusicText');

IF NOT EXISTS ( SELECT * FROM [dbo].[ChannelType] WHERE [ChannelTypeId] = 4 )
	INSERT INTO [dbo].[ChannelType] VALUES  (4, 'MusicVoice');

IF NOT EXISTS ( SELECT * FROM [dbo].[ChannelType] WHERE [ChannelTypeId] = 5 )
	INSERT INTO [dbo].[ChannelType] VALUES  (5, 'CommandText');

IF ('$(BuildConfiguration)' = 'Debug')
BEGIN
    PRINT '***** Creating Test Data for Debug configuration *****';
USE [$(DatabaseName)];

INSERT INTO [dbo].[Server] VALUES ('234024379179204608');
USE [$(DatabaseName)];

INSERT INTO [dbo].[User] VALUES ('125681256385085440', 'kecskeharcos');
USE [$(DatabaseName)];

INSERT INTO [dbo].[Reminder] VALUES (1, SYSDATETIME(), 'Test message');
USE [$(DatabaseName)];

INSERT INTO [dbo].[Greeting] VALUES ('https://cdn.discordapp.com/attachments/891418209843044354/891418299483713576/dreamcatcher-jiu.gif');
INSERT INTO [dbo].[Greeting] VALUES ('https://cdn.discordapp.com/attachments/891418209843044354/891418278990336020/dojauchistwt-jiu.gif');
INSERT INTO [dbo].[Greeting] VALUES ('https://cdn.discordapp.com/attachments/891418209843044354/891418311760437258/jiu-kim-minji.gif');
USE [$(DatabaseName)];

INSERT INTO [dbo].[IdolGroup] VALUES ('dreamcatcher');
USE [$(DatabaseName)];

INSERT INTO [dbo].[Role] VALUES (1, '776814987674910750');
USE [$(DatabaseName)];

INSERT INTO [dbo].[Channel] VALUES (1, '750721047170383872');
INSERT INTO [dbo].[Channel] VALUES (1, '750719483064090734');
USE [$(DatabaseName)];

INSERT INTO [dbo].[ServerSettingChannel] VALUES (1, 1);
INSERT INTO [dbo].[ServerSettingChannel] VALUES (1, 2);
INSERT INTO [dbo].[ServerSettingChannel] VALUES (1, 3);
INSERT INTO [dbo].[ServerSettingChannel] VALUES (1, 5);
INSERT INTO [dbo].[ServerSettingChannel] VALUES (1, 4);
USE [$(DatabaseName)];

INSERT INTO [dbo].[CustomCommand] VALUES (1, 'skeletongif', 'https://tenor.com/view/el-baile-del-troleo-shitposting-esqueleto-gif-18990991');
USE [$(DatabaseName)];

INSERT INTO [dbo].[Idol] VALUES ('yoohyeon', 1);
INSERT INTO [dbo].[Idol] VALUES ('jiu', 1);
INSERT INTO [dbo].[Idol] VALUES ('gahyeon', 1);
INSERT INTO [dbo].[Idol] VALUES ('sua', 1);
INSERT INTO [dbo].[Idol] VALUES ('dami', 1);
INSERT INTO [dbo].[Idol] VALUES ('handong', 1);
INSERT INTO [dbo].[Idol] VALUES ('siyeon', 1);
USE [$(DatabaseName)];

INSERT INTO [dbo].[Keyword] VALUES (1, 'Orbán Viktor', 'Magának V. Iktor excellenciás úr!');
INSERT INTO [dbo].[Keyword] VALUES (1, 'Anyád', 'Vigyázz kivel beszélsz!');
USE [$(DatabaseName)];

INSERT INTO [dbo].[TwitchChannel] VALUES ('153080856', 'https://www.twitch.tv/meeloistryingart', 1, 1);
USE [$(DatabaseName)];

INSERT INTO [dbo].[UserBias] VALUES (1, 1);
INSERT INTO [dbo].[UserBias] VALUES (1, 2);
INSERT INTO [dbo].[UserBias] VALUES (1, 3);
INSERT INTO [dbo].[UserBias] VALUES (1, 4);
INSERT INTO [dbo].[UserBias] VALUES (1, 5);
END
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
